using System.Reflection;
using OpenTelemetry.Resources;
using OpenTelemetry.Trace;
using Serilog;

var builder = WebApplication.CreateBuilder(args);

Log.Logger = new LoggerConfiguration()
    .Enrich.FromLogContext()
    .WriteTo.Console()
    .CreateLogger()
    .ForContext<Program>();

builder.Host.UseSerilog(Log.Logger);

builder.Services.AddOpenTelemetry()
    .ConfigureResource(static resource =>
        resource
            .AddService(
                serviceName: "Kraken.Api",
                serviceNamespace: "Leviatrace", // Name of company, cluster we work on, etc.
                serviceVersion: Assembly.GetExecutingAssembly().GetName().Version!.ToString()
                // serviceInstanceId: "" // Sth that is autogenerated, or get it from cloud provider or config
            )
            .AddAttributes(
                [
                    KeyValuePair.Create<string, object>("service.version",
                        Assembly.GetExecutingAssembly().GetName().Version!.ToString())
                ]
            )
    )
    .WithTracing(static tracing =>
        tracing
            .AddAspNetCoreInstrumentation()
            .AddConsoleExporter()
    );

var app = builder.Build();

app.MapGet(
    "/",
    () => Results.Ok("Kraken.Api")
);

app.MapGet(
    "/observe",
    () => Results.Ok(new { Message = "Kraken is observing the depths for Leviathan activity." })
);

app.Run();

app.Run();
